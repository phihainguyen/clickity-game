{"version":3,"sources":["components/imagecards/index.js","components/Wrapper/index.js","components/header/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","handleHeroClick","id","Wrapper","children","Header","href","score","losses","maxScore","shuffleArray","array","i","length","j","Math","floor","random","temp","Hero","state","heroes","clicked","guesses","heroId","newState","Object","objectSpread","_this","includes","push","setState","_this2","this","shuffledImages","header","components_Wrapper","map","hero","imagecards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03a78140.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props) {\n  return (\n    <div className=\"card\">\n      <div>\n        <img\n          alt={props.name}\n          src={props.image}\n          onClick={() => props.handleHeroClick(props.id)}\n          className=\"img-container\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return (\n    <div className=\"contain1\">\n      <div className=\"wrapper\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <nav className=\"navbar\">\n      <div>\n        <a href=\"/\">\n          <p className=\"partitle\">Clicking Game</p>\n        </a>\n      </div>\n\n      <div className=\"clicktobegin\">\n        <p className=\"par1\">Click an image to begin!</p>\n      </div>\n      <div className=\"par1cont\">\n        <div>\n          <p className=\"par1\">Score: {props.score}</p>\n        </div>\n        <div>\n          <p className=\"par1\">Losses: {props.losses}</p>\n        </div>\n        <div>\n          <p className=\"par1\">Max Score: {props.maxScore}</p>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport ImageCard from \"./components/imagecards\";\nimport Wrapper from \"./components/Wrapper\";\nimport heroes from \"./images.json\";\nimport Header from \"./components/header\";\nimport \"./App.css\";\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\nclass Hero extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    heroes,\n    clicked: false,\n    score: 0,\n    losses: 0,\n    guesses: [],\n    maxScore: 0\n  };\n  handleHeroClick = heroId => {\n    const newState = { ...this.state };\n    if (newState.guesses.includes(heroId)) {\n      newState.losses = newState.losses + 1;\n      newState.score = 0;\n      newState.guesses = [];\n    } else {\n      newState.score = newState.score + 1;\n      newState.guesses.push(heroId);\n    }\n    newState.heroes = shuffleArray(newState.heroes);\n    if (newState.score > newState.maxScore) {\n      newState.maxScore = newState.score;\n    }\n\n    this.setState(newState);\n  };\n  render() {\n    const shuffledImages = shuffleArray(this.state.heroes);\n    return (\n      <div className=\"body\">\n        <Header\n          score={this.state.score}\n          losses={this.state.losses}\n          maxScore={this.state.maxScore}\n        />\n        <Wrapper>\n          {shuffledImages.map(hero => (\n            <ImageCard\n              key={hero.id}\n              id={hero.id}\n              handleHeroClick={this.handleHeroClick}\n              name={hero.name}\n              image={hero.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\nexport default Hero;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Hero from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Hero />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}