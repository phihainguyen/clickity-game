{"ast":null,"code":"import _objectSpread from \"/Users/PhiHai/Desktop/BootCamp/clickity-game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/PhiHai/Desktop/BootCamp/clickity-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport ImageCard from \"./components/imagecards\";\nimport Wrapper from \"./components/Wrapper\";\nimport heroes from \"./images.json\";\nimport Header from \"./components/header\"; // import \"./App.css\";\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nclass Hero extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      heroes,\n      clicked: false,\n      score: 0,\n      losses: 0,\n      guesses: [],\n      maxScore: 0\n    };\n\n    this.handleHeroClick = heroId => {\n      const newState = _objectSpread({}, this.state);\n\n      if (newState.guesses.includes(heroId)) {\n        newState.losses = newState.losses + 1;\n        newState.score = 0;\n        newState.guesses = [];\n      } else {\n        newState.score = newState.score + 1;\n        newState.guesses.push(newState.heroId);\n        console.log(this.guesses);\n      }\n\n      newState.heroes = shuffleArray(newState.heroes);\n\n      if (newState.score > newState.maxScore) {\n        newState.maxScore = newState.score;\n      }\n\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    const shuffledImages = shuffleArray(this.state.heroes);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Header, {\n      score: this.state.score,\n      losses: this.state.losses,\n      maxScore: this.state.maxScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, shuffledImages.map(hero => React.createElement(ImageCard, {\n      key: hero.id,\n      id: hero.id,\n      handleHeroClick: this.handleHeroClick,\n      name: hero.name,\n      image: hero.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Hero;","map":{"version":3,"sources":["/Users/PhiHai/Desktop/BootCamp/clickity-game/src/App.js"],"names":["React","Component","ImageCard","Wrapper","heroes","Header","shuffleArray","array","i","length","j","Math","floor","random","temp","Hero","state","clicked","score","losses","guesses","maxScore","handleHeroClick","heroId","newState","includes","push","console","log","setState","render","shuffledImages","map","hero","id","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ImageCard from \"./components/imagecards\";\nimport Wrapper from \"./components/Wrapper\";\nimport heroes from \"./images.json\";\nimport Header from \"./components/header\";\n// import \"./App.css\";\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\nclass Hero extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    heroes,\n    clicked: false,\n    score: 0,\n    losses: 0,\n    guesses: [],\n    maxScore: 0\n  };\n  handleHeroClick = heroId => {\n    const newState = { ...this.state };\n    if (newState.guesses.includes(heroId)) {\n      newState.losses = newState.losses + 1;\n      newState.score = 0;\n      newState.guesses = [];\n    } else {\n      newState.score = newState.score + 1;\n      newState.guesses.push(newState.heroId);\n      console.log(this.guesses);\n    }\n    newState.heroes = shuffleArray(newState.heroes);\n    if (newState.score > newState.maxScore) {\n      newState.maxScore = newState.score;\n    }\n\n    this.setState(newState);\n  };\n  render() {\n    const shuffledImages = shuffleArray(this.state.heroes);\n    return (\n      <div>\n        <Header\n          score={this.state.score}\n          losses={this.state.losses}\n          maxScore={this.state.maxScore}\n        />\n        <Wrapper>\n          {shuffledImages.map(hero => (\n            <ImageCard\n              key={hero.id}\n              id={hero.id}\n              handleHeroClick={this.handleHeroClick}\n              name={hero.name}\n              image={hero.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\nexport default Hero;\n"]},"metadata":{},"sourceType":"module"}